//
//  AudioSource.h
//  Nuance Mobile Toolkit
//
//  Created by administrator on 2012-10-26.
//  Copyright (c) 2012 administrator. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <nmt_audio/NMT_AudioType.h>
#import <nmt_audio/NMT_AudioChunk.h>

@class NMT_AudioSink;

/**
 * Audio sources provide audio to an {@link NMT_AudioSink}, or multiple audio sinks
 * depending on the implementation. Audio sources should notify attached audio
 * sinks when audio is available, and provide the audio upon request.
 */
@interface NMT_AudioSource : NSObject

/**
 * The type of audio generated by this source.
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 *
 * @return The audio type. This module never returns null.
 */
- (NMT_AudioType *)audioType;

/**
 * How many AudioChunks are currently available for reading from this
 * source.
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 *
 * @param sink[in]: handle of the connected audio sink
 * @return The number of available chunks
 */
- (NSInteger)getChunksAvailableForSink:(NMT_AudioSink*)sink;

/**
 * Indicates whether the source is going to generate any more audio than is
 * currently available.
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 *
 * @return Returns true if this source is active.
 */
- (BOOL)isActive;

/**
 * Equivalent to testing for getChunksAvailableForSink() == 0, but
 * may be optimized.
 *
 * @param sink[in]: handle of the connected audio sink
 * @return true if there are no available chunks for the sink
 */
- (BOOL)isEmptyForSink:(NMT_AudioSink*)sink;

/**
 * Equivalent to checking whether {@link #getChunksAvailable} == 0, but possibly more
 * efficient.
 * <p>
 * Subclasses: override if you can improve efficiency.
 * @return Returns true if there are no available chunks.
 */
- (BOOL)isEmpty;

/**
 * How many audio chunks would be available to a newly connected sink?
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 * @return The number of available chunks. Always >= 0.
 */
- (NSInteger)getChunksAvailable;

/** \brief get a chunk of audio data
 *
 * Get a chunk of audio from this audio source, intended for deposit into
 * the specified AudioSink. This will remove the audio from the source.
 * Called by the AudioSink associated with this AudioSource.
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 *
 * @param sink[in]: handle of the connected audio sink
 * @return The next audio chunk in line for consumption. Nil if none.
 * @see getAudioChunkForSink
 */
- (NMT_AudioChunk*)getAudioChunkForSink:(NMT_AudioSink*)sink;

/**
 * Get all of the available audio chunk. This will remove the audio from the
 * source. Called by the AudioSink associated with this AudioSource.
 * @param sink The intended AudioSink
 * @return The chunks that were read. Nil if none are available.
 */
- (NSArray*)getAllAudioChunksForSink:(NMT_AudioSink*)sink;

/**
 * Get all of the available audio chunk. This will remove the audio from the
 * source. Called by the AudioSink associated with this AudioSource.
 * @param sink The intended AudioSink
 * @param array The mutable array where the chunks will be pushed.
 */
- (void)getAllAudioChunksForSink:(NMT_AudioSink*)sink intoArray:(NSMutableArray*)array;

/**
 * Called by an AudioSink when it connects to this source.
 * This is protected to make sure no other modules are tempted to call this directly.
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 *
 * @param sink[in]: handle of the connected audio sink
 */
- (void)audioSinkConnected:(NMT_AudioSink*)audioSink;

/**
 * Called by an AudioSink when it disconnects from this source.
 * This is protected to make sure no other modules are tempted to call this directly.
 * @remarks This method must be overridden by the subclass or an exception will be thrown.
 *
 * @param sink[in]: handle of the disconnected audio sink
 */
- (void)audioSinkDisconnected:(NMT_AudioSink*)audioSink;

@end
